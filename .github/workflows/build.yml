name: build
on: [push]
env:
  POSTGRES_PASSWORD: postgrespassword
  POSTGRES_URL: 'postgres://postgres:${{ env.POSTGRES_PASSWORD }}@postgres:5432/postgres'
  HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  ACTIONS_SERVER_URL: http://actions-server:3001
jobs:
  app:
    runs-on: ubuntu-latest
    container: node:12.16.3-stretch
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      graphql-engine:
        image: hasura/graphql-engine:v1.2.1
        env:
          HASURA_GRAPHQL_DATABASE_URL: ${{ env.POSTGRES_URL }}
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
          ACTION_BASE_ENDPOINT: ${{ env.ACTIONS_SERVER_URL }}
        options: >-
          --health-cmd "wget --quiet --spider http://localhost:8080/healthz"
          --health-interval 30s
          --health-timeout 3s
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Apply Hasura migrations
        uses: tibotiber/hasura-action@master
        with:
          args: migrate apply
        env:
          HASURA_ENDPOINT: http://graphql-engine:8080
          HASURA_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
          HASURA_WORKDIR: graphql-server
      - name: Apply Hasura metadata
        uses: tibotiber/hasura-action@master
        with:
          args: metadata apply
        env:
          HASURA_ENDPOINT: http://graphql-engine:8080
          HASURA_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
          HASURA_WORKDIR: graphql-server
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Use Node.js ${{ steps.nvm.outputs.NVMRC }}
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Install dependencies
        working-directory: app
        run: yarn install --frozen-lockfile
      - name: Generate GraphQL code
        env:
          REACT_APP_FISHBOWL_GRAPHQL_ENDPOINT: http://graphql-engine:8080/v1/graphql
        run: yarn run gql-gen
        working-directory: app
      - name: Lint
        working-directory: app
        run: yarn run lint
      - name: Build
#        if: github.ref == 'refs/heads/master'
        env:
          CI: false
        working-directory: app
        run: yarn run build
      - uses: actions/upload-artifact@v2
#        if: github.ref == 'refs/heads/master'
        with:
          name: app
          path: app/build/

  actions-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Use Node.js ${{ steps.nvm.outputs.NVMRC }}
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Install dependencies
        working-directory: actions-server
        run: yarn install --frozen-lockfile
      - name: Lint
        working-directory: actions-server
        run: yarn run lint
