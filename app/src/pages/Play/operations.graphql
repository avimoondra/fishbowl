mutation CreateTurn($gameId: uuid!, $playerId: uuid!, $roundId: uuid!) {
  insert_turns_one(
    object: { game_id: $gameId, player_id: $playerId, round_id: $roundId }
  ) {
    id
    game_id
    player_id
    round_id
  }
}

mutation StartTurn($currentTurnId: uuid!) {
  update_turns_by_pk(
    pk_columns: { id: $currentTurnId }
    _set: { started_at: "now()" }
  ) {
    id
    started_at
  }
}

mutation EndCurrentTurnAndStartNextTurn(
  $currentTurnId: uuid!
  $completedCardIds: jsonb!
  $gameId: uuid!
  $currentTurnScorings: [turn_scorings_insert_input!]!
  $nextTurnplayerId: uuid!
  $nextTurnSecondsPerTurnOverride: Int
  $roundId: uuid
) {
  delete_turn_scorings(where: { turn_id: { _eq: $currentTurnId } }) {
    returning {
      id
    }
  }
  insert_turn_scorings(objects: $currentTurnScorings) {
    returning {
      id
    }
  }
  update_turns_by_pk(
    pk_columns: { id: $currentTurnId }
    _set: { ended_at: "now()", completed_card_ids: $completedCardIds }
  ) {
    id
    ended_at
    completed_card_ids
  }
  insert_turns_one(
    object: {
      game_id: $gameId
      player_id: $nextTurnplayerId
      seconds_per_turn_override: $nextTurnSecondsPerTurnOverride
      round_id: $roundId
    }
  ) {
    id
    game_id
    player_id
    seconds_per_turn_override
    round_id
  }
}

mutation StartReview($currentTurnId: uuid!) {
  update_turns_by_pk(
    pk_columns: { id: $currentTurnId }
    _set: { review_started_at: "now()" }
  ) {
    id
    review_started_at
  }
}

query ServerTime {
  server_time {
    now
  }
}
